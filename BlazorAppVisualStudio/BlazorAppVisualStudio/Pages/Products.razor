@using BlazorAppVisualStudio.Models;
@using BlazorAppVisualStudio.Services;
@using Blazored.Toast
@using Blazored.Toast.Services

@page "/product"

@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IToastService toastService;

<PageTitle>Products</PageTitle>

@* <h1>Counter</h1> *@
<ModuleTitle Title="Products"></ModuleTitle>

<style>
/*     .products-container{
        display:grid;
        grid-template-columns: repeat(auto-fill, 280px);
        grid-auto-rows: auto;
        grid-gap: 1rem;
    } */
</style>

<button class="btn btn-dark" @onclick="@(()=> NavigationManager.NavigateTo("/addproduct"))">Add product</button>

@if (products?.Count > 0)
{
    // Mostrar info
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                    <button class="btn btn-success" title="Delete" @onclick="@(() => GoToEditProduct(product.Id))">
                        <span class="oi oi-pencil"></span>
                    </button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos para mostrar</p>
}

@code {
    private List<Product> products;

    //private async Task<List<Product>> GetProducts()
    private async Task GetProducts()
    {
        // return await productService.Get();
        products = await productService.Get();
    }

    protected override async Task OnInitializedAsync()
    {
        // products = await GetProducts();
        await GetProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}?"))
        {
            return;
        }

        await productService.Delete(product.Id);

        toastService.ShowSuccess("Producto eliminado");

        await GetProducts();
    }

    private void GoToEditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/editproduct/{productId}");
    }
}
